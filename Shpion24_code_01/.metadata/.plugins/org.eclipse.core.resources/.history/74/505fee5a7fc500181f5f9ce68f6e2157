#include "uart.h"
#include <stdint.h>
#include <stddef.h>
#include <ti/drivers/UART.h>
#include "Board.h"

#define MAX_NUM_RX_BYTES    1000   // Maximum RX bytes to receive in one go
#define MAX_NUM_TX_BYTES    1000   // Maximum TX bytes to send in one go
uint32_t wantedRxBytes;            // Number of bytes received so far
uint8_t rxBuf[MAX_NUM_RX_BYTES];   // Receive buffer
uint8_t txBuf[MAX_NUM_TX_BYTES];   // Transmit buffer
// Read callback function
static void readCallback(UART_Handle handle, void *rxBuf, size_t size)
{
    // Make sure we received all expected bytes
    if (size == wantedRxBytes) {
        // Copy bytes from RX buffer to TX buffer
       for(size_t i = 0; i < size; i++){
           txBuf[i] = ((uint8_t*)rxBuf)[i];
       }
       // Echo the bytes received back to transmitter
       UART_write(handle, txBuf, size);
       // Start another read, with size the same as it was during first call to
       // UART_read()
       UART_read(handle, rxBuf, wantedRxBytes);
    }
    else {
        // Handle error or call to UART_readCancel()
    }
}
// Write callback function
static void writeCallback(UART_Handle handle, void *rxBuf, size_t size)
{
    // Do nothing
}



void UARTinit(){
    UART_Handle handle;
        UART_Params params;
        // Init UART
        UART_init();
        // Specify non-default parameters
        UART_Params_init(&params);
        params.baudRate      = 9600;
        params.writeMode     = UART_MODE_CALLBACK;
        params.writeDataMode = UART_DATA_BINARY;
        params.writeCallback = writeCallback;
        params.readMode      = UART_MODE_CALLBACK;
        params.readDataMode  = UART_DATA_BINARY;
        params.readCallback  = readCallback;
        // Open the UART and initiate the first read
        handle = UART_open(Board_UART0, &params);
        wantedRxBytes = 16;
        int rxBytes = UART_read(handle, rxBuf, wantedRxBytes);
        while(true); // Wait foreve
}

